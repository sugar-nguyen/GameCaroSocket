@page
@model IndexModel
@{
    ViewData["Title"] = "Game caro";
}

<div id="game_outline">
    <div id="game_content">
        <table>
        </table>
        <div id="game_footer">
            <button id="new_game" title="Bắt đầu"><i class="fa fa-play"></i></button>
            <button id="undo" title="Đánh lại"><i class="fa fa-undo"></i></button>
            <div id="runtime_wating">
                <i class="fa fa-clock"></i>
                <div id="div_runtime"> <span>00:</span><span id="second_runtime">30</span></div>
            </div>
        </div>
    </div>
    <div id="user_content">
        <div class="chat_header">
            Hội thoại
        </div>
        <div class="chat_content">
            <div class="message notifi"><span>notifi</span></div>
            <div class="message message_1"><i class="fa fa-user-tie"></i><span>Xin chào</span></div>
            <div class="message message_2"><i class="fa fa-user-tie"></i><span>cmm</span></div>
        </div>
        <div class="chat_box">
            <input type="text" id="chat_input" placeholder="Nhập tin nhắn...">
            <button id="btn_send_message"><i class="fa fa-play"></i></button>
        </div>
    </div>
</div>
<div id="box_modal">
    <div class="box_modal_header">Đăng nhập</div>
    <div class="box_modal_content container">
        <div class="form-group">
            <label>Tên đăng nhập :</label>
            <input type="text" name="userName" id="userName" value="" autocomplete="off" />
        </div>
        <div class="form-group">
            <label>Phòng :</label>
            <input type="text" name="room" id="room" value="" autocomplete="off" />
        </div>
        <hr />
        <div class="row">
            <div class="col-lg-12"> <button id="btnLogin">Đăng nhập</button></div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        (function ($) {

            $('#box_modal').modal({
                fadeDuration: 100,
            })

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            async function startSignal() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");
                } catch (err) {
                    console.log(err);
                    setTimeout(startSignal, 5000);
                }
            };

            startSignal();

            var Caro = function () {
                var self = this;
                var roomId = $('#room');
                var userName = $('#userName');
                var btnLogin = $('#btnLogin');
                this.row_x = 20;
                this.row_y = 24;
                this.data = {
                    array_check: [],
                    tick: 0
                };
                this.render_table = function () {
                    var str = '';
                    for (var i = 0; i < this.row_x; i++) {
                        str += '<tr>';
                        var arr = [];
                        for (var j = 0; j < this.row_y; j++) {
                            str += '<td id="cell_' + i + '_' + j + '" class="cell" data-x="' + i + '" data-y="' + j + '"></td>';
                            arr.push(false);
                        }
                        this.data.array_check.push(arr);
                        str += '</tr>';
                    }
                    var game_content = $('#game_content table');
                    game_content.html(str);
                    var cell = $('#game_content .cell');
                    cell.click(function () {
                        var a = this;
                        self.cell_click(a, function (a) {
                            self.check_win(a)
                        });
                    });

                };
                this.cell_click = function (obj, callback) {
                    var cell = $(obj);
                    cell.addClass('cell_active');
                    if (this.data.tick % 2 === 0) cell.addClass('cell_active_x');
                    else cell.addClass('cell_active_y');

                    self.data.array_check[cell.attr('data-x')][cell.attr('data-y')] = true;
                    this.data.tick += 1;

                    if (callback)
                        callback(obj);
                };
                this.check_win = function (obj) {
                    var cell = $(obj);
                    var data_x = cell.attr('data-x'), data_y = cell.attr('data-y');

                    var d = 0, k = data_x, h = data_y;
                    var arr = Array.from(self.data.array_check);
                    //check row
                    while (arr[k][h]) {
                        d++;
                        h++;
                    }
                    h = data_y;
                    while (arr[k][h]) {
                        d++;
                        h--;
                    }
                    if (d > 5) {
                        alert("win");
                        return;
                    }

                    //check column
                    d = 0; h = data_y;
                    while (arr[k][h]) {
                        d++;
                        k++;
                    }
                    k = data_x;
                    while (arr[k][h]) {
                        d++;
                        k--;
                    }
                    if (d > 5) {
                        alert("win");
                        return;
                    }
                    //check main diagonal
                    d = 0; k = data_x; h = data_y;
                    while (arr[k][h]) {
                        k--;
                        h--;
                        d++;
                    }
                    k = data_x; h = data_y;
                    while (arr[k][h]) {
                        k++;
                        h++;
                        d++;
                    }
                    if (d > 5) {
                        alert("win");
                        return;
                    }
                    //check secondary diagonal
                    d = 0; k = data_x; h = data_y;
                    while (arr[k][h]) {
                        k++;
                        h--;
                        d++;
                    }
                    k = data_x; h = data_y;
                    while (arr[k][h]) {
                        k--;
                        h++;
                        d++;
                    }
                    if (d > 5) {
                        alert("win");
                        return;
                    }
                };
                this.start = function () {
                    this.render_table();
                    btnLogin.click(function () {
                        connection.invoke("OnUserConnected", roomId.val(), userName.val()).catch(function (err) { return console.log(err.toString()) });
                    });
                };

                this.start();

            }

            new Caro();
            registerHubMethod(connection);
        })($);

        function registerHubMethod(conn) {
            conn.on('onUserCreateRoom', function (roomId, player) {
                console.log("room:" + roomId + "  player: " + player.userName);
            });
            conn.on('roomIdNotExists', function () {
                console.log('Phòng không tồn tại.');
            })
        }
    </script>

}